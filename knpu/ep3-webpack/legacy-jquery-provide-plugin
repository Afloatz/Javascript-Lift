# Legacy JQuerty Provide Plugin

Alright, we are on a roll with our three entry files: login, rep log, and layout dot js.

Now that layout dot js is being processed through webpack, we can remove our self executing function and replace the dollar sign with const $ = require('l') just like we've been doing.

This time, there's surprise. When we refresh, we have a very strange function. It says dollar sign dot tooltip is not a function. So, it's saying that it doesn't think that dot tooltip is a function. This actually comes from bootstrap dot js, which in our base layout is something that we're including. So why doesn't it see it? The thing is, if you think about it, bootstrap's who job is to modify jquary to add more functions to it and in layout dot js, we require a fresh jquary, a fresh unmodified jquary, and then try to call dot tooltip on it. Bootstrap has actually been added to this jquary from our layout. Jquary is loaded from our layout, bootstrap modifies that global jquary variable and then down here, our layout file is downloaded where we use a different jquary that does not have bootstrap added to it.

The fix is that we need to once again handle our dependencies inside of our layout dot js file, which means if we need bootstrap inside of this file, we need to require it inside of this file. Very simply, like always, we're going to say yarn add bootstrap dash dash dev. You can double check that that's the right package name if you want to.

Then, this is very interesting. We're just going to say require bootstrap. Notice I don't set this to a variable. This is something that's unique to jquary plug-ins like bootstrap, where the java plug-ins does not actually return anything. It's just that we need to require them so that the jquary variable is modified.

Alright, so try it now. We actually have the same error. This is a little confusing. What's going to make it more clear is in your base layout, I want you to actually go in and remove jquary and bootstrap. We don't need these anymore. We've refactored all of our code into webpack modules, so we don't need jquary to be available globally and we don't need bootstrap to be available globally either.

This time when you refresh, we're going to get an error that's more helpful. Jquary is not defined. If you are to look inside of here, I know it's a little confusing because we're short some tools, you'll actually see this is coming from bootstrap. Here's the deal. This is where webpack can get tricky. Bootstrap requires there to be a global jquary object. In a perfect world, when we require bootstrap, internally it would require jquary and modify it so that the jquary that we're using here is these same jquary that it's modifying inside, but it doesn't do that. Bootstrap requires there to be a global jquary variable. It modifies that global jquary variable.

There are a few ways to fix this. First, we could say window dot jquary equals dollar sign. If we had done that and refreshed, there are no errors and everything works. So, what we're doing here is we're importing our jquary module, setting that on the global window variable, and then inside the bootstrap is looking for window dot jquary, so it actually modifies our dollar sign variable. It does exactly what we want it to.

There are a couple problems with this. One, I don't want to set things as global variables anymore. I want to keep everything local and clean. Second, we're probably going to face this setting in a lot of other situations. Any other time we have a jquary plug-in, we're going to have the same exact problem. There's a more global way to fix this.

I should also mention that there's something called imports loader, which we'll talk more about later, which can help you out in this situation.

So delete the window dot jquary line. Instead, go to webpack.js.org. We'll look around this site a little bit, but I want you to skip straight to documentation, then plug-ins, and find the provide plug-in. In green it says automatically load modules instead of having to import or require them everywhere. This is kind of crazy. It really shows off the power of webpack.

First, let's use it. We can use it by saying new webpack dot provide dot plug-in. It doesn't give you a lot of details, but I'll show you. In webpack dot config dot js file, there's a new key you can have called plug-ins. Set to an array. Here we're going to say new webpack dot provide plug-in and then pass that in array. Here we're going to pass at a key called jquary set to the string jquary all lowercase. The provide plug-in does this. Now thanks to this line, whenever it finds a variable in any file called jquary, and that variable is an uninitialized variable, in other words some files like bootstrap is requiring there to be a global jquary variable. When it finds those, when it dumps the built file, it'll actually replace it with require jquary. In other words, whenever anything relies on a global jquary variable, this plug-in will replace that code with a proper require. We can also do the same thing for the dollar sign set to jquary. If anything relies on the dollar sign variable, the provide plug-in will magically rewrite that code to say require jquary.

Now notice here that it's saying new webpack element is not exported. We're actually at the top going to say const webpack equals require webpack. It's one little detail they don't show in the documentation, but that's where that webpack is coming from. Then provide plug-in is a key on that. It says unresolved type, but that will work.

Okay. Let's try this. I'm going to go back, restart my script since we modified the main webpack file, then go over back to our code. Refresh and everything still works. If you look at the build slash layout dot js file, these files are not meant for us to read them, but I actually want to. So here's the webpack bootstrap code up here, then I'm actually going to search for the word bootstrap. Here we can find bootstrap included. Check this out, this webpack var injection. It actually wraps bootstrap in a self executing back and passes jquary.

If we scroll all the way down following this green line here to the bottom of that, you can say dot call exports. The argument actually passing as jquary is this webpack underscore require underscore underscore zero thing. This is all very, very difficult to read, but this line here is actually a line that goes out and gets the properly required jquary so that it's passed as an argument up here. So, now down below, when it looks for jquary ... Whenever it looks for the jquary variable inside of this, it's actually been rewritten so that it will use that require.

All the way back on top ... Again, this is difficult to read, but you can see ... First thing it does is actually include jquary. This little comment here with the zero is saying that this is actually the zero library. So further below, when we see it requiring the webpack zero library, that is actually jquary.

When you look at the dump code ... I realize it's complex ... The main takeaway is this, whenever ... Thanks to the provide plug-in, if there are more legacy modules that aren't requiring things correctly and relying on jquary to be an equivalence variable, they're not going to be a problem anymore.

