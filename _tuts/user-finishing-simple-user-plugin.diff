diff --git a/web/assets/js/Leaderboard.js b/web/assets/js/Leaderboard.js
index 295924a..e255b45 100644
--- a/web/assets/js/Leaderboard.js
+++ b/web/assets/js/Leaderboard.js
@@ -17,7 +17,9 @@ window.Leaderboard = (function($, dust, Routing, undefined){
             this.eventEmitter.addListener('reps.update', $.proxy(this._handleRepsUpdate, this));
 
             // trigger the userInfoBox behavior
-            this.$wrapper.find('.js-username').userInfoPopup();
+            this.$wrapper.userInfoPopup({
+                selector: '.js-username'
+            });
         },
 
         /**
diff --git a/web/assets/js/jquery/jquery.userinfopopup.js b/web/assets/js/jquery/jquery.userinfopopup.js
index 4997c8a..379dd28 100644
--- a/web/assets/js/jquery/jquery.userinfopopup.js
+++ b/web/assets/js/jquery/jquery.userinfopopup.js
@@ -1,18 +1,133 @@
 (function($, Routing, undefined) {
 
     $.fn.userInfoPopup = function(option) {
+        return this.each(function() {
+            var $this   = $(this);
+            var data    = $this.data('userInfoPopup');
+            var options = typeof option == 'object' && option;
 
-        this.each(function() {
-            $(this).on('mouseover', function() {
-                $(this).data('original', $(this).html());
+            // force that there is one app object created for each element
+            if (!data) $this.data('userInfoPopup', (data = new app(this, options)));
+            // if the form is $('.ele').userInfoPopup('method'), call the method() function
+            if (typeof option == 'string') data[option]();
+        });
+    };
+
+    // just a defaults array - by putting it here, we're exposing the defaults globally
+    $.fn.userInfoPopup.defaults = {
+        selector: null,
+        template: '<div class="user-info-box"><img src="__avatar__" alt="__username__" class="pull-right img-thumbnail" /><dl><dt>Name</dt><dd>__firstName__ __lastName__</dd></dl></div>'
+    };
+
+    /**
+     * Constructor for the object representing one instance of the userInfoPopup functionality
+     *
+     * @param element
+     * @param options
+     */
+    var app = function(element, options) {
+        this.$element = $(element);
+
+        this.initialize();
+    };
+
+    $.extend(app.prototype, {
+        initialize: function() {
+            this.$element.on('shown.bs.popover', this.options.selector, $.proxy(this._handlePopoverShown, this));
+            this.$element.on('hidden.bs.popover', this.options.selector, $.proxy(this._handlePopoverHidden, this));
+        },
 
-                $(this).html('Hallo!');
+        /**
+         * Dispalys the popup for this $el
+         *
+         * @param $el
+         */
+        show: function($el) {
+            var self = this;
+
+            $el.popover({
+                trigger: 'manual',
+                html: true,
+                title: $el.text(),
+                animation: false,
+                content: function() {
+                    return self._calculateContent($el);
+                }
             });
+            $el.popover('show');
+        },
+
+        /**
+         * Hides the popup for this $el
+         *
+         * @param $el
+         */
+        hide: function($el) {
+            $el.popover('hide');
+        },
+
+        /**
+         * Find (or AJAX out) to get the content for this $el
+         *
+         * @param $el
+         * @returns {*}
+         * @private
+         */
+        _calculateContent: function($el) {
+            var self = this;
+
+            var username = $.trim($el.text());
 
-            $(this).on('mouseout', function() {
-                $(this).html($(this).data('original'));
+            // temporarily just stopping here
+            return username;
+
+            var html = $el.data('userinfo.html');
+            if (html) {
+                return html;
+            }
+
+            $.ajax({
+                type: 'GET',
+                // todo - urlencode username
+                url: Routing.generate('user_show', {
+                    username: username,
+                    _format: 'json'
+                }),
+                success: function (data) {
+                    var html = self.options.template.replace(/__username__/g, data.username);
+                    html = html.replace(/__firstName__/g, data.firstName);
+                    html = html.replace(/__lastName__/g, data.lastName);
+                    html = html.replace(/__avatar__/g, data.avatar);
+
+                    // set the data
+                    $el.data('userinfo.html', html);
+
+                    // re-triger the show, will grab the new html
+                    // but only trigger it if it's visible (what if we have gone off hover since starting?)
+                    if ($el.data('bs.popover.visible')) {
+                        $el.popover('show');
+                    }
+                }
             });
-        });
-    }
+
+            return 'Loading...';
+        },
+
+        /**
+         * Just listens to popover so we know later if we're in a "shown" state or not
+         */
+        _handlePopoverShown: function(e) {
+            var $target = $(e.currentTarget);
+            $target.data('bs.popover.visible', true);
+        },
+
+        /**
+         * See notes on _handlePopoverShown
+         */
+        _handlePopoverHidden: function(e) {
+            var $target = $(e.currentTarget);
+            $target.data('bs.popover.visible', false);
+        }
+    });
 
 }(jQuery, Routing));
\ No newline at end of file
