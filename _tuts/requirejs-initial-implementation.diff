diff --git a/app/Resources/views/_requirejs.html.twig b/app/Resources/views/_requirejs.html.twig
new file mode 100644
index 0000000..669b2f5
--- /dev/null
+++ b/app/Resources/views/_requirejs.html.twig
@@ -0,0 +1,23 @@
+<script src="{{ asset('assets/vendor/requirejs/require.js') }}"></script>
+<script>
+    requirejs.config({
+        baseUrl: '/assets/js'
+    });
+
+    /**
+     * The heart of our require.js setup!
+     *
+     *   1) Require the common.js file to get all the paths and shim setup
+     *   2) Once that file is downloaded, download and execute app/default.js
+     *      (a global module, executed on every page) and execute whatever
+     *      page-specific app we have (e.g. app/homepage). This will do
+     *      whatever craziness we want.
+     */
+    require(['common'], function (common) {
+        {% if module %}
+            require(['app/default', '{{ module }}']);
+        {% else %}
+            require(['app/default']);
+        {% endif %}
+    });
+</script>
\ No newline at end of file
diff --git a/app/Resources/views/base.html.twig b/app/Resources/views/base.html.twig
index 7f2e7b8..ab39ebd 100644
--- a/app/Resources/views/base.html.twig
+++ b/app/Resources/views/base.html.twig
@@ -20,6 +20,30 @@
     <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
     <script src="https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js"></script>
     <![endif]-->
+
+    {#
+        This replaces the javascripts block. Required modules are added
+        to the dom as script tags with the async attribute. This means
+        that only the actual require.js file is "blocking" (except for IE9 and earlier),
+        and it's *less* important to have JavaScripts in the footer.
+        Additionally, putting them here (which will cause *some* blocking),
+        could cause your JavaScript to start responding faster since
+        it begins downloading earlier.
+
+        Usage in children templates (notice you don't need to call parent()),
+        since the app/default module is *always* loaded in _requirejs.html.twig.
+
+        {% block requirejs %}
+            {{ include('::_requirejs.html.twig', {
+                module: 'app/mypage'
+            }) }}
+        {% endblock %}
+    #}
+    {% block requirejs %}
+        {{ include('::_requirejs.html.twig', {
+            module: false
+        }) }}
+    {% endblock %}
 </head>
 
 <body>
diff --git a/web/assets/js/app/default.js b/web/assets/js/app/default.js
new file mode 100644
index 0000000..b0c44e2
--- /dev/null
+++ b/web/assets/js/app/default.js
@@ -0,0 +1,10 @@
+/**
+ * Default module that's used on every page
+ */
+define(['jquery'], function ($) {
+    $(document).ready(function() {
+        $('h1').on('click', function() {
+            alert('click!');
+        });
+    });
+});
\ No newline at end of file
diff --git a/web/assets/js/common.js b/web/assets/js/common.js
new file mode 100644
index 0000000..19254cf
--- /dev/null
+++ b/web/assets/js/common.js
@@ -0,0 +1,34 @@
+/**
+ * The main requirejs configuration (except for baseUrl)
+ *
+ * This file is included in ::_requirejs.html.twig and in Gruntfile.js. The
+ * baseUrl is not here so we can dynamically vary it in ::_requirejs.html.twig
+ */
+requirejs.config({
+    paths: {
+        /**
+         * Things like this only work because the library has code in it to
+         * detect if require.js is present, and manually register the module
+         * if it is. Normally, if a library you're including doesn't support
+         * AMD, you will likely need a paths entry and also an entry in
+         * shim (beyond what you see for the bootstrap shim).
+         */
+        jquery: '../vendor/jquery/jquery',
+        bootstrap: '../vendor/bootstrap/dist/js/bootstrap'
+    },
+    shim: {
+        /**
+         * bootstrap does not support AMD. This means that require.js doesn't
+         * now that jquery needs to be downloaded first, before bootstrap.
+         * This accomplishes this.
+         *
+         * Unlike most modules, we don't actually care about receiving some
+         * sort of "bootstrap" object, we simply require the "bootstrap"
+         * module so that all of its jQuery plugins are available. If we
+         * needed to capture some sort of return object (like the $ in jQuery,
+         * except that it fortunately supports AMD), we would need to do
+         * a little more work here.
+         */
+        bootstrap: ['jquery']
+    }
+});
