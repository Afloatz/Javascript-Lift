diff --git a/web/assets/js/ErrorList.js b/web/assets/js/ErrorList.js
deleted file mode 100644
index 5fc805a..0000000
--- a/web/assets/js/ErrorList.js
+++ /dev/null
@@ -1,36 +0,0 @@
-window.ErrorList = (function($, undefined){
-
-    var ErrorList = function($wrapper) {
-        this.$wrapper = $wrapper;
-
-        this.initialize();
-    };
-
-    $.extend(ErrorList.prototype, {
-        initialize: function() {
-            this.$wrapper.addClass('error-list alert alert-danger');
-
-            this._toggleHidden();
-        },
-
-        _toggleHidden: function() {
-            var isEmpty = $.trim(this.$wrapper.html()) == '';
-
-            this.$wrapper.toggleClass('hide', isEmpty);
-        },
-
-        clear: function() {
-            this.$wrapper.empty();
-
-            this._toggleHidden();
-        },
-
-        addMessage: function(msg) {
-            this.$wrapper.append('<li>' + msg + '</li>');
-
-            this._toggleHidden();
-        }
-    });
-
-    return ErrorList;
-})(jQuery);
diff --git a/web/assets/js/RepForm.js b/web/assets/js/RepForm.js
deleted file mode 100644
index 1e56fb7..0000000
--- a/web/assets/js/RepForm.js
+++ /dev/null
@@ -1,70 +0,0 @@
-window.RepForm = (function($, SymfonyErrorUtil, ErrorList, undefined){
-
-    var RepForm = function ($form, eventEmitter) {
-        this.$form = $form;
-        this.eventEmitter = eventEmitter;
-
-        this.initialize();
-    };
-
-    $.extend(RepForm.prototype, {
-
-        errorList: null,
-
-        initialize: function () {
-            this.$form.on('submit', $.proxy(this.handleSubmit, this));
-
-            var $ul = $('<ul></ul>');
-            this.$form.prepend($ul);
-            this.errorList = new ErrorList($ul);
-        },
-
-        handleSubmit: function (e) {
-            e.preventDefault();
-            var self = this;
-            var $form = this.$form;
-
-            $.ajax({
-                type: 'POST',
-                url: $form.attr('action') + '.json',
-                data: $form.serialize(),
-                error: function (jqXhr) {
-                    self.parseErrorResponse(jqXhr.responseJSON);
-
-                },
-                success: function () {
-                    var $notifications = $('#js-notifications');
-                    $notifications.empty();
-                    $notifications.append('<div class="alert alert-success">Reps saved! You\'re killing it!</div>');
-
-                    self.errorList.clear();
-
-                    // trigger that the reps updated
-                    self.eventEmitter.emitEvent('reps.update');
-                }
-            });
-        },
-
-        parseErrorResponse: function (errorResponse) {
-            var self = this;
-            var errors = SymfonyErrorUtil.parseErrors(errorResponse.errors);
-
-            var $form = this.$form;
-
-            // remove any field errors
-            $form.find('.form-group').removeClass('has-error');
-
-            this.errorList.clear();
-
-            $.each(errors, function (key, message) {
-                var $input = $form.find('[name*="[' + key + ']"]');
-                $input.closest('.form-group').addClass('has-error');
-
-                self.errorList.addMessage(message);
-            });
-        }
-    });
-
-    return RepForm;
-
-})(jQuery, SymfonyErrorUtil, ErrorList);
diff --git a/web/assets/js/SymfonyErrorUtil.js b/web/assets/js/SymfonyErrorUtil.js
deleted file mode 100644
index e02920d..0000000
--- a/web/assets/js/SymfonyErrorUtil.js
+++ /dev/null
@@ -1,36 +0,0 @@
-window.SymfonyErrorUtil = (function($, undefined){
-
-    return {
-        /**
-         * Pass in the responseJson.errors value of a standard Symfony errors
-         * response to this function. It will return a flat hash of errors:
-         *
-         *  {
-         *      global: 'CSRF error'
-         *      firstName: 'Please enter a name'
-         *  }
-         *
-         * For simplicity, this only uses the first error of each field.
-         *
-         * @param errorsObj
-         */
-        parseErrors: function(errorsObj) {
-            var errors = {};
-
-            // check for global errors
-            if (errorsObj.errors) {
-                errors['global'] = errorsObj.errors[0];
-            }
-
-            $.each(errorsObj.children, function (key, data) {
-                if (!data.errors) {
-                    return;
-                }
-
-                errors[key] = data.errors[0];
-            });
-
-            return errors;
-        }
-    };
-})(jQuery);
diff --git a/web/assets/js/app/lift.js b/web/assets/js/app/lift.js
index 64d919f..7a75450 100644
--- a/web/assets/js/app/lift.js
+++ b/web/assets/js/app/lift.js
@@ -1,16 +1,18 @@
 /**
  * Default module that's used on every page
  */
-define(['jquery', 'eventEmitter'], function ($, EventEmitter) {
+define(['jquery', 'eventEmitter', 'modules/RepForm'], function ($, EventEmitter, RepForm) {
     var emitter = new EventEmitter();
 
     jQuery(document).ready(function() {
         var repForm = new RepForm($('form.rep-log-form'), emitter);
+        /*
         var leaderboard = new Leaderboard(
             $('#leaderboard'),
             $('#js-template-leaderboard').html(),
             {},
             emitter
         );
+        */
     });
 });
\ No newline at end of file
diff --git a/web/assets/js/modules/ErrorList.js b/web/assets/js/modules/ErrorList.js
new file mode 100644
index 0000000..ac2f79b
--- /dev/null
+++ b/web/assets/js/modules/ErrorList.js
@@ -0,0 +1,36 @@
+define(['jquery'], function ($) {
+
+    var ErrorList = function($wrapper) {
+        this.$wrapper = $wrapper;
+
+        this.initialize();
+    };
+
+    $.extend(ErrorList.prototype, {
+        initialize: function() {
+            this.$wrapper.addClass('error-list alert alert-danger');
+
+            this._toggleHidden();
+        },
+
+        _toggleHidden: function() {
+            var isEmpty = $.trim(this.$wrapper.html()) == '';
+
+            this.$wrapper.toggleClass('hide', isEmpty);
+        },
+
+        clear: function() {
+            this.$wrapper.empty();
+
+            this._toggleHidden();
+        },
+
+        addMessage: function(msg) {
+            this.$wrapper.append('<li>' + msg + '</li>');
+
+            this._toggleHidden();
+        }
+    });
+
+    return ErrorList;
+});
diff --git a/web/assets/js/modules/RepForm.js b/web/assets/js/modules/RepForm.js
new file mode 100644
index 0000000..b5a61cf
--- /dev/null
+++ b/web/assets/js/modules/RepForm.js
@@ -0,0 +1,69 @@
+define(['jquery', 'modules/SymfonyErrorUtil', 'modules/ErrorList'], function ($, SymfonyErrorUtil, ErrorList) {
+
+    var RepForm = function ($form, eventEmitter) {
+        this.$form = $form;
+        this.eventEmitter = eventEmitter;
+
+        this.initialize();
+    };
+
+    $.extend(RepForm.prototype, {
+
+        errorList: null,
+
+        initialize: function () {
+            this.$form.on('submit', $.proxy(this.handleSubmit, this));
+
+            var $ul = $('<ul></ul>');
+            this.$form.prepend($ul);
+            this.errorList = new ErrorList($ul);
+        },
+
+        handleSubmit: function (e) {
+            e.preventDefault();
+            var self = this;
+            var $form = this.$form;
+
+            $.ajax({
+                type: 'POST',
+                url: $form.attr('action') + '.json',
+                data: $form.serialize(),
+                error: function (jqXhr) {
+                    self.parseErrorResponse(jqXhr.responseJSON);
+
+                },
+                success: function () {
+                    var $notifications = $('#js-notifications');
+                    $notifications.empty();
+                    $notifications.append('<div class="alert alert-success">Reps saved! You\'re killing it!</div>');
+
+                    self.errorList.clear();
+
+                    // trigger that the reps updated
+                    self.eventEmitter.emitEvent('reps.update');
+                }
+            });
+        },
+
+        parseErrorResponse: function (errorResponse) {
+            var self = this;
+            var errors = SymfonyErrorUtil.parseErrors(errorResponse.errors);
+
+            var $form = this.$form;
+
+            // remove any field errors
+            $form.find('.form-group').removeClass('has-error');
+
+            this.errorList.clear();
+
+            $.each(errors, function (key, message) {
+                var $input = $form.find('[name*="[' + key + ']"]');
+                $input.closest('.form-group').addClass('has-error');
+
+                self.errorList.addMessage(message);
+            });
+        }
+    });
+
+    return RepForm;
+});
diff --git a/web/assets/js/modules/SymfonyErrorUtil.js b/web/assets/js/modules/SymfonyErrorUtil.js
new file mode 100644
index 0000000..824da17
--- /dev/null
+++ b/web/assets/js/modules/SymfonyErrorUtil.js
@@ -0,0 +1,36 @@
+define(['jquery'], function ($) {
+
+    return {
+        /**
+         * Pass in the responseJson.errors value of a standard Symfony errors
+         * response to this function. It will return a flat hash of errors:
+         *
+         *  {
+         *      global: 'CSRF error'
+         *      firstName: 'Please enter a name'
+         *  }
+         *
+         * For simplicity, this only uses the first error of each field.
+         *
+         * @param errorsObj
+         */
+        parseErrors: function(errorsObj) {
+            var errors = {};
+
+            // check for global errors
+            if (errorsObj.errors) {
+                errors['global'] = errorsObj.errors[0];
+            }
+
+            $.each(errorsObj.children, function (key, data) {
+                if (!data.errors) {
+                    return;
+                }
+
+                errors[key] = data.errors[0];
+            });
+
+            return errors;
+        }
+    };
+});
